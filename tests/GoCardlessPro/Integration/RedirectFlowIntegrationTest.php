<?php
//
// WARNING: Do not edit by hand, this file was generated by Crank:
// https://github.com/gocardless/crank
//

namespace GoCardlessPro\Integration;

class RedirectFlowsTest extends IntegrationTestBase
{
    public function setUp()
    {
        $this->clientAndFixtureSetup('redirect_flows');
    }

    public function testResourceExists()
    {
        $obj = new \GoCardlessPro\Resources\RedirectFlow(null);
        $this->assertNotNull($obj);
    }

    public function testRedirectFlowsCreate()
    {
        $fixture = $this->stubResponse('create');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->redirect_flows();
        $response = call_user_func_array(array($resourceService, 'create'), $func_array);

        $body = $fixture->body->redirect_flows;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\RedirectFlow', $response);

        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->redirect_url, $response->redirect_url());
        $this->matchDeepResponse($body->scheme, $response->scheme());
        $this->matchDeepResponse($body->session_token, $response->session_token());
        $this->matchDeepResponse($body->success_redirect_url, $response->success_redirect_url());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testRedirectFlowsGet()
    {
        $fixture = $this->stubResponse('get');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->redirect_flows();
        $response = call_user_func_array(array($resourceService, 'get'), $func_array);

        $body = $fixture->body->redirect_flows;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\RedirectFlow', $response);

        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->redirect_url, $response->redirect_url());
        $this->matchDeepResponse($body->scheme, $response->scheme());
        $this->matchDeepResponse($body->session_token, $response->session_token());
        $this->matchDeepResponse($body->success_redirect_url, $response->success_redirect_url());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testRedirectFlowsComplete()
    {
        $fixture = $this->stubResponse('complete');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->redirect_flows();
        $response = call_user_func_array(array($resourceService, 'complete'), $func_array);

        $body = $fixture->body->redirect_flows;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\RedirectFlow', $response);

        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->redirect_url, $response->redirect_url());
        $this->matchDeepResponse($body->scheme, $response->scheme());
        $this->matchDeepResponse($body->session_token, $response->session_token());
        $this->matchDeepResponse($body->success_redirect_url, $response->success_redirect_url());
    

        $this->assertTrue($this->hasCheckedCurl);
    }
}
