<?php
//
// WARNING: Do not edit by hand, this file was generated by Crank:
// https://github.com/gocardless/crank
//

namespace GoCardlessPro\Integration;

class PaymentsTest extends IntegrationTestBase
{
    public function setUp()
    {
        $this->clientAndFixtureSetup('payments');
    }

    public function testResourceExists()
    {
        $obj = new \GoCardlessPro\Resources\Payment(null);
        $this->assertNotNull($obj);
    }

    public function testPaymentsCreate()
    {
        $fixture = $this->stubResponse('create');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->payments();
        $response = call_user_func_array(array($resourceService, 'create'), $func_array);

        $body = $fixture->body->payments;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Payment', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->amount_refunded, $response->amount_refunded());
        $this->matchDeepResponse($body->app_fee, $response->app_fee());
        $this->matchDeepResponse($body->charge_date, $response->charge_date());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->reference, $response->reference());
        $this->matchDeepResponse($body->status, $response->status());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testPaymentsList()
    {
        $fixture = $this->stubResponse('list');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->payments();
        $response = call_user_func_array(array($resourceService, 'list'), $func_array);

        $body = $fixture->body->payments;

    
        $records = $response->records();
        $this->assertInstanceOf('\GoCardlessPro\Core\ListResponse', $response);
        $this->assertInstanceOf('\GoCardlessPro\Resources\Payment', $records[0]);

        $this->assertEquals($fixture->body->meta->cursors->before, $response->meta()->cursors()->before());
        $this->assertEquals($fixture->body->meta->cursors->after, $response->meta()->cursors()->after());
    

    
        foreach (range(0, count($body) - 1) as $num) {
            $record = $records[$num];
            $this->matchDeepResponse($body[$num]->amount, $record->amount());
            $this->matchDeepResponse($body[$num]->amount_refunded, $record->amount_refunded());
            $this->matchDeepResponse($body[$num]->app_fee, $record->app_fee());
            $this->matchDeepResponse($body[$num]->charge_date, $record->charge_date());
            $this->matchDeepResponse($body[$num]->created_at, $record->created_at());
            $this->matchDeepResponse($body[$num]->currency, $record->currency());
            $this->matchDeepResponse($body[$num]->description, $record->description());
            $this->matchDeepResponse($body[$num]->id, $record->id());
            $this->matchDeepResponse($body[$num]->links, $record->links());
            $this->matchDeepResponse($body[$num]->metadata, $record->metadata());
            $this->matchDeepResponse($body[$num]->reference, $record->reference());
            $this->matchDeepResponse($body[$num]->status, $record->status());
            
        }

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testPaymentsGet()
    {
        $fixture = $this->stubResponse('get');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->payments();
        $response = call_user_func_array(array($resourceService, 'get'), $func_array);

        $body = $fixture->body->payments;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Payment', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->amount_refunded, $response->amount_refunded());
        $this->matchDeepResponse($body->app_fee, $response->app_fee());
        $this->matchDeepResponse($body->charge_date, $response->charge_date());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->reference, $response->reference());
        $this->matchDeepResponse($body->status, $response->status());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testPaymentsUpdate()
    {
        $fixture = $this->stubResponse('update');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->payments();
        $response = call_user_func_array(array($resourceService, 'update'), $func_array);

        $body = $fixture->body->payments;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Payment', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->amount_refunded, $response->amount_refunded());
        $this->matchDeepResponse($body->app_fee, $response->app_fee());
        $this->matchDeepResponse($body->charge_date, $response->charge_date());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->reference, $response->reference());
        $this->matchDeepResponse($body->status, $response->status());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testPaymentsCancel()
    {
        $fixture = $this->stubResponse('cancel');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->payments();
        $response = call_user_func_array(array($resourceService, 'cancel'), $func_array);

        $body = $fixture->body->payments;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Payment', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->amount_refunded, $response->amount_refunded());
        $this->matchDeepResponse($body->app_fee, $response->app_fee());
        $this->matchDeepResponse($body->charge_date, $response->charge_date());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->reference, $response->reference());
        $this->matchDeepResponse($body->status, $response->status());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testPaymentsRetry()
    {
        $fixture = $this->stubResponse('retry');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->payments();
        $response = call_user_func_array(array($resourceService, 'retry'), $func_array);

        $body = $fixture->body->payments;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Payment', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->amount_refunded, $response->amount_refunded());
        $this->matchDeepResponse($body->app_fee, $response->app_fee());
        $this->matchDeepResponse($body->charge_date, $response->charge_date());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->description, $response->description());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->reference, $response->reference());
        $this->matchDeepResponse($body->status, $response->status());
    

        $this->assertTrue($this->hasCheckedCurl);
    }
}
