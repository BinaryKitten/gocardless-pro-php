<?php
//
// WARNING: Do not edit by hand, this file was generated by Crank:
// https://github.com/gocardless/crank
//

namespace GoCardlessPro\Integration;

use \GoCardlessPro\Core\Helpers\StaticStorage as StaticStorage;

abstract class IntegrationTestBase extends \PHPUnit_Framework_TestCase
{

    public function setUp()
    {
        StaticStorage::setup();
        $this->hasCheckedCurl = false;
    }

    public function tearDown()
    {
        StaticStorage::tearDown();
    }

    protected function stubResponse($method)
    {
        $fixture = $this->fixture->{$method};
        $this->stubFixture = $fixture;
        StaticStorage::onCall('curl_exec', array($this, 'checkCurlCall'));
        StaticStorage::setRetVal('curl_exec', json_encode($fixture->body));
        return $fixture;
    }

    public function checkCurlCall()
    {
        $pathTest = \GoCardlessPro\Services\Base::sub_url(
            $this->stubFixture->path_template,
            (array)$this->stubFixture->url_params
        );

        $curlUrl = StaticStorage::getOpt(CURLOPT_URL);
        $this->assertEquals($this->client->http_client()->base_url() . substr($pathTest, 1), $curlUrl);
        $requestMethod = StaticStorage::getOpt(CURLOPT_CUSTOMREQUEST);
        $this->assertEquals($requestMethod, strtoupper($this->stubFixture->method));
        StaticStorage::setRetVal(CURLINFO_CONTENT_TYPE, 'application/json');
        StaticStorage::setRetVal(CURLINFO_HTTP_CODE, 200);
        $headers = StaticStorage::getOpt(CURLOPT_HTTPHEADER);
        $this->assertContains('authorization: Bearer foobar', $headers);

        // Set flag for ensuring curl library is called.
        $this->hasCheckedCurl = true;
    }

    protected function matchDeepResponse($fixture, $test)
    {
        if ($test instanceof \GoCardlessPro\Resources\Wrapper\NestedObject) {
            $this->assertEquals($fixture, $test->raw());
        } elseif ($test instanceof \GoCardlessPro\Resources\Wrapper\NestedArray) {
            $this->assertEquals($fixture, $test->raw());
        } else {
            $this->assertEquals($fixture, $test);
        }
    }

    protected function clientAndFixtureSetup($modelName)
    {
        $this->client = new \GoCardlessPro\Client(array('access_token' => 'foobar'));
        $json_path = './tests/GoCardlessPro/fixtures/'.$modelName.'.json';
        $this->fixture = json_decode(file_get_contents($json_path));
    }
}
