<?php
//
// WARNING: Do not edit by hand, this file was generated by Crank:
// https://github.com/gocardless/crank
//

namespace GoCardlessPro\Integration;

class CreditorBankAccountsTest extends IntegrationTestBase
{
    public function setUp()
    {
        $this->clientAndFixtureSetup('creditor_bank_accounts');
    }

    public function testResourceExists()
    {
        $obj = new \GoCardlessPro\Resources\CreditorBankAccount(null);
        $this->assertNotNull($obj);
    }

    public function testCreditorBankAccountsCreate()
    {
        $fixture = $this->stubResponse('create');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->creditor_bank_accounts();
        $response = call_user_func_array(array($resourceService, 'create'), $func_array);

        $body = $fixture->body->creditor_bank_accounts;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\CreditorBankAccount', $response);

        $this->matchDeepResponse($body->account_holder_name, $response->account_holder_name());
        $this->matchDeepResponse($body->account_number_ending, $response->account_number_ending());
        $this->matchDeepResponse($body->bank_name, $response->bank_name());
        $this->matchDeepResponse($body->country_code, $response->country_code());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->enabled, $response->enabled());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testCreditorBankAccountsList()
    {
        $fixture = $this->stubResponse('list');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->creditor_bank_accounts();
        $response = call_user_func_array(array($resourceService, 'list'), $func_array);

        $body = $fixture->body->creditor_bank_accounts;

    
        $records = $response->records();
        $this->assertInstanceOf('\GoCardlessPro\Core\ListResponse', $response);
        $this->assertInstanceOf('\GoCardlessPro\Resources\CreditorBankAccount', $records[0]);

        $this->assertEquals($fixture->body->meta->cursors->before, $response->meta()->cursors()->before());
        $this->assertEquals($fixture->body->meta->cursors->after, $response->meta()->cursors()->after());
    

    
        foreach (range(0, count($body) - 1) as $num) {
            $record = $records[$num];
            $this->matchDeepResponse($body[$num]->account_holder_name, $record->account_holder_name());
            $this->matchDeepResponse($body[$num]->account_number_ending, $record->account_number_ending());
            $this->matchDeepResponse($body[$num]->bank_name, $record->bank_name());
            $this->matchDeepResponse($body[$num]->country_code, $record->country_code());
            $this->matchDeepResponse($body[$num]->created_at, $record->created_at());
            $this->matchDeepResponse($body[$num]->currency, $record->currency());
            $this->matchDeepResponse($body[$num]->enabled, $record->enabled());
            $this->matchDeepResponse($body[$num]->id, $record->id());
            $this->matchDeepResponse($body[$num]->links, $record->links());
            $this->matchDeepResponse($body[$num]->metadata, $record->metadata());
            
        }

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testCreditorBankAccountsGet()
    {
        $fixture = $this->stubResponse('get');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->creditor_bank_accounts();
        $response = call_user_func_array(array($resourceService, 'get'), $func_array);

        $body = $fixture->body->creditor_bank_accounts;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\CreditorBankAccount', $response);

        $this->matchDeepResponse($body->account_holder_name, $response->account_holder_name());
        $this->matchDeepResponse($body->account_number_ending, $response->account_number_ending());
        $this->matchDeepResponse($body->bank_name, $response->bank_name());
        $this->matchDeepResponse($body->country_code, $response->country_code());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->enabled, $response->enabled());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testCreditorBankAccountsDisable()
    {
        $fixture = $this->stubResponse('disable');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->creditor_bank_accounts();
        $response = call_user_func_array(array($resourceService, 'disable'), $func_array);

        $body = $fixture->body->creditor_bank_accounts;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\CreditorBankAccount', $response);

        $this->matchDeepResponse($body->account_holder_name, $response->account_holder_name());
        $this->matchDeepResponse($body->account_number_ending, $response->account_number_ending());
        $this->matchDeepResponse($body->bank_name, $response->bank_name());
        $this->matchDeepResponse($body->country_code, $response->country_code());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->enabled, $response->enabled());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
    

        $this->assertTrue($this->hasCheckedCurl);
    }
}
