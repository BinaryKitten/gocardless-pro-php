<?php
//
// WARNING: Do not edit by hand, this file was generated by Crank:
// https://github.com/gocardless/crank
//

namespace GoCardlessPro\Integration;

class SubscriptionsTest extends IntegrationTestBase
{
    public function setUp()
    {
        $this->clientAndFixtureSetup('subscriptions');
    }

    public function testResourceExists()
    {
        $obj = new \GoCardlessPro\Resources\Subscription(null);
        $this->assertNotNull($obj);
    }

    public function testSubscriptionsCreate()
    {
        $fixture = $this->stubResponse('create');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->subscriptions();
        $response = call_user_func_array(array($resourceService, 'create'), $func_array);

        $body = $fixture->body->subscriptions;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Subscription', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->count, $response->count());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->day_of_month, $response->day_of_month());
        $this->matchDeepResponse($body->end_date, $response->end_date());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->interval, $response->interval());
        $this->matchDeepResponse($body->interval_unit, $response->interval_unit());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->month, $response->month());
        $this->matchDeepResponse($body->name, $response->name());
        $this->matchDeepResponse($body->payment_reference, $response->payment_reference());
        $this->matchDeepResponse($body->start_date, $response->start_date());
        $this->matchDeepResponse($body->status, $response->status());
        $this->matchDeepResponse($body->upcoming_payments, $response->upcoming_payments());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testSubscriptionsList()
    {
        $fixture = $this->stubResponse('list');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->subscriptions();
        $response = call_user_func_array(array($resourceService, 'list'), $func_array);

        $body = $fixture->body->subscriptions;

    
        $records = $response->records();
        $this->assertInstanceOf('\GoCardlessPro\Core\ListResponse', $response);
        $this->assertInstanceOf('\GoCardlessPro\Resources\Subscription', $records[0]);

        $this->assertEquals($fixture->body->meta->cursors->before, $response->meta()->cursors()->before());
        $this->assertEquals($fixture->body->meta->cursors->after, $response->meta()->cursors()->after());
    

    
        foreach (range(0, count($body) - 1) as $num) {
            $record = $records[$num];
            $this->matchDeepResponse($body[$num]->amount, $record->amount());
            $this->matchDeepResponse($body[$num]->count, $record->count());
            $this->matchDeepResponse($body[$num]->created_at, $record->created_at());
            $this->matchDeepResponse($body[$num]->currency, $record->currency());
            $this->matchDeepResponse($body[$num]->day_of_month, $record->day_of_month());
            $this->matchDeepResponse($body[$num]->end_date, $record->end_date());
            $this->matchDeepResponse($body[$num]->id, $record->id());
            $this->matchDeepResponse($body[$num]->interval, $record->interval());
            $this->matchDeepResponse($body[$num]->interval_unit, $record->interval_unit());
            $this->matchDeepResponse($body[$num]->links, $record->links());
            $this->matchDeepResponse($body[$num]->metadata, $record->metadata());
            $this->matchDeepResponse($body[$num]->month, $record->month());
            $this->matchDeepResponse($body[$num]->name, $record->name());
            $this->matchDeepResponse($body[$num]->payment_reference, $record->payment_reference());
            $this->matchDeepResponse($body[$num]->start_date, $record->start_date());
            $this->matchDeepResponse($body[$num]->status, $record->status());
            $this->matchDeepResponse($body[$num]->upcoming_payments, $record->upcoming_payments());
            
        }

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testSubscriptionsGet()
    {
        $fixture = $this->stubResponse('get');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->subscriptions();
        $response = call_user_func_array(array($resourceService, 'get'), $func_array);

        $body = $fixture->body->subscriptions;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Subscription', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->count, $response->count());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->day_of_month, $response->day_of_month());
        $this->matchDeepResponse($body->end_date, $response->end_date());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->interval, $response->interval());
        $this->matchDeepResponse($body->interval_unit, $response->interval_unit());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->month, $response->month());
        $this->matchDeepResponse($body->name, $response->name());
        $this->matchDeepResponse($body->payment_reference, $response->payment_reference());
        $this->matchDeepResponse($body->start_date, $response->start_date());
        $this->matchDeepResponse($body->status, $response->status());
        $this->matchDeepResponse($body->upcoming_payments, $response->upcoming_payments());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testSubscriptionsUpdate()
    {
        $fixture = $this->stubResponse('update');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->subscriptions();
        $response = call_user_func_array(array($resourceService, 'update'), $func_array);

        $body = $fixture->body->subscriptions;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Subscription', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->count, $response->count());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->day_of_month, $response->day_of_month());
        $this->matchDeepResponse($body->end_date, $response->end_date());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->interval, $response->interval());
        $this->matchDeepResponse($body->interval_unit, $response->interval_unit());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->month, $response->month());
        $this->matchDeepResponse($body->name, $response->name());
        $this->matchDeepResponse($body->payment_reference, $response->payment_reference());
        $this->matchDeepResponse($body->start_date, $response->start_date());
        $this->matchDeepResponse($body->status, $response->status());
        $this->matchDeepResponse($body->upcoming_payments, $response->upcoming_payments());
    

        $this->assertTrue($this->hasCheckedCurl);
    }

    public function testSubscriptionsCancel()
    {
        $fixture = $this->stubResponse('cancel');

        $func_array = array_values((array) $fixture->url_params);
        $resourceService = $this->client->subscriptions();
        $response = call_user_func_array(array($resourceService, 'cancel'), $func_array);

        $body = $fixture->body->subscriptions;

    
        $this->assertInstanceOf('\GoCardlessPro\Resources\Subscription', $response);

        $this->matchDeepResponse($body->amount, $response->amount());
        $this->matchDeepResponse($body->count, $response->count());
        $this->matchDeepResponse($body->created_at, $response->created_at());
        $this->matchDeepResponse($body->currency, $response->currency());
        $this->matchDeepResponse($body->day_of_month, $response->day_of_month());
        $this->matchDeepResponse($body->end_date, $response->end_date());
        $this->matchDeepResponse($body->id, $response->id());
        $this->matchDeepResponse($body->interval, $response->interval());
        $this->matchDeepResponse($body->interval_unit, $response->interval_unit());
        $this->matchDeepResponse($body->links, $response->links());
        $this->matchDeepResponse($body->metadata, $response->metadata());
        $this->matchDeepResponse($body->month, $response->month());
        $this->matchDeepResponse($body->name, $response->name());
        $this->matchDeepResponse($body->payment_reference, $response->payment_reference());
        $this->matchDeepResponse($body->start_date, $response->start_date());
        $this->matchDeepResponse($body->status, $response->status());
        $this->matchDeepResponse($body->upcoming_payments, $response->upcoming_payments());
    

        $this->assertTrue($this->hasCheckedCurl);
    }
}
