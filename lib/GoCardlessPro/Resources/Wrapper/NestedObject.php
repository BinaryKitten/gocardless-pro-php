<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardlessPro\Resources\Wrapper;

/**
  * NestedObject shim. Allows one to get properties of a nested object using
  * dynamic getter methods.
  * @author Iain Nash
  * @package GoCardlessPro
  * @subpackage \Resources\Wrapper
  */
class NestedObject
{
    /** @var string Property name the nested object encloses */
    private $name;
    /** @var array[mixed] Property values the nested object encloses */
    private $data;

    /**
      * @param string $name The property name that this object describes.
      * @param mixed $data The data contained in this object.
      */
    public function __construct($name, $data)
    {
        $this->name = $name;
        $this->data = $data;
    }

    /**
      * If the data exists matching this method, return it's value otherwise, return false
      * If the data is a nested object, return a new NestedObject class to wrap that data predictably.
      * @return NestedObject|mixed|false
      */
    public function __call($name, $arguments)
    {
        if (count($arguments) === 0 && property_exists($this->data, $name)) {
            $value = $this->data->{$name};
            if (is_object($value)) {
                return new NestedObject($name, $value);
            } else {
                return $value;
            }
        }
        return false;
    }

    /**
      * Returns a string representation of the data contained within the getter method.
      * @return string
      */
    public function __toString()
    {
        return $this->name . ' ' . print_r($this->data, true);
    }

    /**
      * Get all this object's keys
      *
      * @return mixed[]
      */
    public function keys()
    {
        return get_object_vars($this->data);
    }

    public function raw()
    {
        return $this->data;
    }
}
