<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Services;

/**
  *  Payment objects represent payments from a
  *  [customer](https://developer.gocardless.com/pro/#api-endpoints-customers)
  *  to a
  *  [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditors),
  *  taken against a Direct Debit
  *  [mandate](https://developer.gocardless.com/pro/#api-endpoints-mandates).
 
  *  *  
  *  GoCardless will notify you via a
  *  [webhook](https://developer.gocardless.com/pro/#webhooks) whenever the
  *  state of a payment changes.
  */
class Payment extends Base
{
  
  /**
    *  <a name="mandate_is_inactive"></a>Creates a new payment object.
    *  
 
    *    *  This fails with a `mandate_is_inactive` error if the linked
    *  [mandate](https://developer.gocardless.com/pro/#api-endpoints-mandates)
    *  is cancelled. Payments can be created against `pending_submission`
    *  mandates, but they will not be submitted until the mandate becomes
    *  active.
    *
    *  Example URL: /payments
    **/
    public function create($options = array())
    {
        return $this->makeRequest('post', '/payments', $options);
    }

  /**
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your payments.
    *
    *  Example URL: /payments
    **/
    public function do_list($options = array())
    {
        return $this->makeRequest('get', '/payments', $options);
    }

  /**
    *  Retrieves the details of a single existing payment.
    *
    *  Example URL: /payments/:identity
    *
    *  @param identity:  Unique identifier, beginning with "PM"
    **/
    public function get($identity, $options = array())
    {
        $path = $this->subUrl('/payments/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('get', $path, $options);
    }

  /**
    *  Updates a payment object. This accepts only the metadata parameter.
    *
    *  Example URL: /payments/:identity
    *
    *  @param identity:  Unique identifier, beginning with "PM"
    **/
    public function update($identity, $options = array())
    {
        $path = $this->subUrl('/payments/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('put', $path, $options);
    }

  /**
    *  Cancels the payment if it has not already been submitted to the banks.
    *  Any metadata supplied to this endpoint will be stored on the payment
    *  cancellation event it causes.
    *  
    *  This will fail with a
    *  `cancellation_failed` error unless the payment's status is
    *  `pending_submission`.
    *
    *  Example URL: /payments/:identity/actions/cancel
    *
    *  @param identity:  Unique identifier, beginning with "PM"
    **/
    public function cancel($identity, $options = array())
    {
        $path = $this->subUrl('/payments/:identity/actions/cancel', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }

  /**
    *  <a name="retry_failed"></a>Retries a failed payment if the underlying
    *  mandate is active. You will receive a `resubmission_requested` webhook,
    *  but after that retrying the payment follows the same process as its
    *  initial creation, so you will receive a `submitted` webhook, followed by
    *  a `confirmed` or `failed` event. Any metadata supplied to this endpoint
    *  will be stored against the payment submission event it causes.
    *  
  
    *   *  This will return a `retry_failed` error if the payment has not
    *  failed.
    *
    *  Example URL: /payments/:identity/actions/retry
    *
    *  @param identity:  Unique identifier, beginning with "PM"
    **/
    public function retry($identity, $options = array())
    {
        $path = $this->subUrl('/payments/:identity/actions/retry', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }


  /**
    * Handles functions in the API that are normally PHP reserved words.
    */
    public function __call($name, $args)
    {
        $attemptName = 'do_' . $name;
        if (method_exists($this, $attemptName)) {
            return call_user_func_array(array($this, $attemptName), $args);
        }
        return false;
    }

  /**
   * Get the resource loading class.
   */
    protected function resourceClass()
    {
        return '\GoCardless\Resources\Payment';
    }

  /**
    *  Get the key the response object is enclosed in in JSON.
    */
    protected function envelopeKey()
    {
        return 'payments';
    }
}
