<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Services;

/**
  *  
  */
class User extends Base
{
  
  /**
    *  <a name="user_exists"></a>Creates a new user object. Email addresses must
    *  be unique.
    *
    *  Example URL: /users
    *  @return User
    **/
    public function create($params = array(), $headers = array())
    {
        return $this->makeRequest('post', '/users', $params);
    }

  /**
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your users.
    *
    *  Example URL: /users
    *  @return ListResponse
    **/
    public function do_list($params = array(), $headers = array())
    {
        return $this->makeRequest('get', '/users', $params);
    }

  /**
    *  Retrieves the details of an existing user. In addition to the usual
    *  permissions based access rules, any user can access their own record.
    *
    *  Example URL: /users/:identity
    *
    *  @param identity:  Unique identifier, beginning with "US"
    *  @return User
    **/
    public function get($identity, $params = array(), $headers = array())
    {
        $path = $this->subUrl('/users/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('get', $path, $params, $headers);
    }

  /**
    *  Updates a user object. Supports all of the fields supported when creating
    *  a user.
    *
    *  Example URL: /users/:identity
    *
    *  @param identity:  Unique identifier, beginning with "US"
    *  @return User
    **/
    public function update($identity, $params = array(), $headers = array())
    {
        $path = $this->subUrl('/users/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('put', $path, $params, $headers);
    }

  /**
    *  Enables a user
    *
    *  Example URL: /users/:identity/actions/enable
    *
    *  @param identity:  Unique identifier, beginning with "US"
    *  @return User
    **/
    public function enable($identity, $params = array(), $headers = array())
    {
        $path = $this->subUrl('/users/:identity/actions/enable', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $params, $headers);
    }

  /**
    *  Disables a user
    *
    *  Example URL: /users/:identity/actions/disable
    *
    *  @param identity:  Unique identifier, beginning with "US"
    *  @return User
    **/
    public function disable($identity, $params = array(), $headers = array())
    {
        $path = $this->subUrl('/users/:identity/actions/disable', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $params, $headers);
    }



  /**
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your users.
    *
    *  Example URL: /users\
    *  @return Paginator
    **/
    public function all($listMax, $options = array())
    {
        return new Paginator($this, $listMax, $this->do_list($options), $options);
    }


   /**
    * Get the resource loading class.
    * Used internally to send http requests.
    *
    * @return string
    */
    protected function resourceClass()
    {
        return '\GoCardless\Resources\User';
    }

  /**
    *  Get the key the response object is enclosed in in JSON.
    *  Used internally to wrap and unwrap http requests.
    *
    *  @return string
    */
    protected function envelopeKey()
    {
        return 'users';
    }
}
