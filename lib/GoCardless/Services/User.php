<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Services;

/**
  *  
  */
class User extends Base
{
  
  /**
    *  <a name="user_exists"></a>Creates a new user object. Email addresses must
    *  be unique.
    *
    *  Example URL: /users
    **/
    public function create($options = array())
    {
        return $this->makeRequest('post', '/users', $options);
    }

  /**
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your users.
    *
    *  Example URL: /users
    **/
    public function do_list($options = array())
    {
        return $this->makeRequest('get', '/users', $options);
    }

  /**
    *  Retrieves the details of an existing user. In addition to the usual
    *  permissions based access rules, any user can access their own record.
    *
    *  Example URL: /users/:identity
    *
    *  @param identity:  Unique identifier, beginning with "US"
    **/
    public function get($identity, $options = array())
    {
        $path = $this->subUrl('/users/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('get', $path, $options);
    }

  /**
    *  Updates a user object. Supports all of the fields supported when creating
    *  a user.
    *
    *  Example URL: /users/:identity
    *
    *  @param identity:  Unique identifier, beginning with "US"
    **/
    public function update($identity, $options = array())
    {
        $path = $this->subUrl('/users/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('put', $path, $options);
    }

  /**
    *  Enables a user
    *
    *  Example URL: /users/:identity/actions/enable
    *
    *  @param identity:  Unique identifier, beginning with "US"
    **/
    public function enable($identity, $options = array())
    {
        $path = $this->subUrl('/users/:identity/actions/enable', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }

  /**
    *  Disables a user
    *
    *  Example URL: /users/:identity/actions/disable
    *
    *  @param identity:  Unique identifier, beginning with "US"
    **/
    public function disable($identity, $options = array())
    {
        $path = $this->subUrl('/users/:identity/actions/disable', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }


  /**
    * Handles functions in the API that are normally PHP reserved words.
    */
    public function __call($name, $args)
    {
        $attemptName = 'do_' . $name;
        if (method_exists($this, $attemptName)) {
            return call_user_func_array(array($this, $attemptName), $args);
        }
        return false;
    }

  /**
   * Get the resource loading class.
   */
    protected function resourceClass()
    {
        return '\GoCardless\Resources\User';
    }

  /**
    *  Get the key the response object is enclosed in in JSON.
    */
    protected function envelopeKey()
    {
        return 'users';
    }
}
