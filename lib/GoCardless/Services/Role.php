<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Services;

/**
  *  <a name="insufficient_permissions"></a>Roles represent a set of permissions
  *  that may be granted to a user. The permissions are specified at the
  *  resource-type level, and can be `full_access` or `read_only`. If a
  *  resource-type is not included that role's users will have no access to
  *  resources of that type, and will receive an `insufficient_permissions`
  *  error when trying to use those endpoints.
  *  
  *  A role's `permissions`
  *  attribute is used to set/show the permissions for a role and it's key/value
  *  pairs are restricted to the below:
  *  
  *  <dl>
  *   
  *  <dt><p><code>resource</code></p></dt>
  *    <dd><p>One of:</p>
  *     
  *  <ul>
  *        <li><code>customers</code></li>
  *       
  *  <li><code>customer_bank_accounts</code></li>
  *       
  *  <li><code>mandates</code></li>
  *        <li><code>payments</code></li>
 
  *  *        <li><code>payouts</code></li>
  *       
  *  <li><code>creditors</code></li>
  *       
  *  <li><code>creditor_bank_accounts</code></li>
  *       
  *  <li><code>roles</code></li>
  *        <li><code>users</code></li>
  *     
  *    <li><code>events</code></li>
  *        <li><code>api_keys</code></li>
 
  *  *        <li><code>subscriptions</code></li>
  *       
  *  <li><code>redirect_flows</code></li>
  *      </ul>
  *    </dd>
  * 
  *  </dl>
  *  
  *  <dl>
  *    <dt><p><code>access</code></p></dt>
  *   
  *  <dd><p>One of:</p>
  *      <ul>
  *        <li><code>full_access</code>:
  *  read and write all records of this type</li>
  *       
  *  <li><code>read_only</code>: list and show endpoints available, but not
  *  create, update, delete, or actions</li>
  *      </ul>
  *    </dd>
  * 
  *  </dl>
  *  
  */
class Role extends Base
{
  
  /**
    *  Create a role with set access permissions
    *
    *  Example URL: /roles
    **/
    public function create($options = array())
    {
        return $this->makeRequest('post', '/roles', $options);
    }

  /**
    *  List all existing roles
    *
    *  Example URL: /roles
    **/
    public function do_list($options = array())
    {
        return $this->makeRequest('get', '/roles', $options);
    }

  /**
    *  Retrieve all details for a single role
    *
    *  Example URL: /roles/:identity
    *
    *  @param identity:  Unique identifier, beginning with "RO"
    **/
    public function get($identity, $options = array())
    {
        $path = $this->subUrl('/roles/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('get', $path, $options);
    }

  /**
    *  Updates a role object. Supports all of the fields supported when creating
    *  a role.
    *
    *  Example URL: /roles/:identity
    *
    *  @param identity:  Unique identifier, beginning with "RO"
    **/
    public function update($identity, $options = array())
    {
        $path = $this->subUrl('/roles/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('put', $path, $options);
    }

  /**
    *  Disables a role
    *
    *  Example URL: /roles/:identity/actions/disable
    *
    *  @param identity:  Unique identifier, beginning with "RO"
    **/
    public function disable($identity, $options = array())
    {
        $path = $this->subUrl('/roles/:identity/actions/disable', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }


  /**
    * Handles functions in the API that are normally PHP reserved words.
    */
    public function __call($name, $args)
    {
        $attemptName = 'do_' . $name;
        if (method_exists($this, $attemptName)) {
            return call_user_func_array(array($this, $attemptName), $args);
        }
        return false;
    }

  /**
   * Get the resource loading class.
   */
    protected function resourceClass()
    {
        return '\GoCardless\Resources\Role';
    }

  /**
    *  Get the key the response object is enclosed in in JSON.
    */
    protected function envelopeKey()
    {
        return 'roles';
    }
}
