<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Services;

/**
  *  Mandates represent the Direct Debit mandate with a
  *  [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).

  *   *  
  *  GoCardless will notify you via a
  *  [webhook](https://developer.gocardless.com/pro/#webhooks) whenever the
  *  status of a mandate changes.
  */
class Mandate extends Base
{
  
  /**
    *  Creates a new mandate object
    *
    *  Example URL: /mandates
    **/
    public function create($options = array())
    {
        return $this->makeRequest('post', '/mandates', $options);
    }

  /**
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your mandates. Except where stated, these filters can only be
    *  used one at a time.
    *
    *  Example URL: /mandates
    **/
    public function do_list($options = array())
    {
        return $this->makeRequest('get', '/mandates', $options);
    }

  /**
    *  Retrieves the details of an existing mandate.
    *  
    *  If you
    *  specify `Accept: application/pdf` on a request to this endpoint it will
    *  return a PDF complying to the relevant scheme rules, which you can
    *  present to your customer.
    *  
    *  PDF mandates can be retrieved in
    *  Dutch, English, French, German, Italian, Portuguese and Spanish by
    *  specifying the [ISO
    *  639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes#Partial_ISO_639_table)
    *  language code as an `Accept-Language` header.
    *
    *  Example URL: /mandates/:identity
    *
    *  @param identity:  Unique identifier, beginning with "MD"
    **/
    public function get($identity, $options = array())
    {
        $path = $this->subUrl('/mandates/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('get', $path, $options);
    }

  /**
    *  Updates a mandate object. This accepts only the metadata parameter.
    *
    *  Example URL: /mandates/:identity
    *
    *  @param identity:  Unique identifier, beginning with "MD"
    **/
    public function update($identity, $options = array())
    {
        $path = $this->subUrl('/mandates/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('put', $path, $options);
    }

  /**
    *  Immediately cancels a mandate and all associated cancellable payments.
    *  Any metadata supplied to this endpoint will be stored on the mandate
    *  cancellation event it causes.
    *  
    *  This will fail with a
    *  `cancellation_failed` error if the mandate is already cancelled.
    *
    *  Example URL: /mandates/:identity/actions/cancel
    *
    *  @param identity:  Unique identifier, beginning with "MD"
    **/
    public function cancel($identity, $options = array())
    {
        $path = $this->subUrl('/mandates/:identity/actions/cancel', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }

  /**
    *  <a name="mandate_not_inactive"></a>Reinstates a cancelled or expired
    *  mandate to the banks. You will receive a `resubmission_requested`
    *  webhook, but after that reinstating the mandate follows the same process
    *  as its initial creation, so you will receive a `submitted` webhook,
    *  followed by a `reinstated` or `failed` webhook up to two working days
    *  later. Any metadata supplied to this endpoint will be stored on the
    *  `resubmission_requested` event it causes.
    *  
    *  This will fail
    *  with a `mandate_not_inactive` error if the mandate is already being
    *  submitted, or is active.
    *
    *  Example URL: /mandates/:identity/actions/reinstate
    *
    *  @param identity:  Unique identifier, beginning with "MD"
    **/
    public function reinstate($identity, $options = array())
    {
        $path = $this->subUrl('/mandates/:identity/actions/reinstate', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }


  /**
    * Handles functions in the API that are normally PHP reserved words.
    */
    public function __call($name, $args)
    {
        $attemptName = 'do_' . $name;
        if (method_exists($this, $attemptName)) {
            return call_user_func_array(array($this, $attemptName), $args);
        }
        return false;
    }

  /**
   * Get the resource loading class.
   */
    protected function resourceClass()
    {
        return '\GoCardless\Resources\Mandate';
    }

  /**
    *  Get the key the response object is enclosed in in JSON.
    */
    protected function envelopeKey()
    {
        return 'mandates';
    }
}
