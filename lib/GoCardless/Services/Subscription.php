<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Services;

/**
  *  Subscriptions create
  *  [payments](https://developer.gocardless.com/pro/#api-endpoints-payments)
  *  according to a schedule.
  *  
  *  #### Recurrence Rules
  *  
  *  The
  *  following rules apply when specifying recurrence:
  *  - The first payment
  *  must be charged within 1 year.
  *  - When neither `month` nor
  *  `day_of_month` are present, the subscription will recur from the `start_at`
  *  based on the `interval_unit`.
  *  - If `month` or `day_of_month` are
  *  present, the recurrence rules will be applied from the `start_at`, and the
  *  following validations apply:
  *  
  *  | interval_unit   | month          
  *                                 | day_of_month                            |

  *   *  | :-------------- | :--------------------------------------------- |
  *  :-------------------------------------- |
  *  | yearly          | optional
  *  (required if `day_of_month` provided) | optional (required if `month`
  *  provided) |
  *  | monthly         | invalid                               
  *          | required                                |
  *  | weekly         
  *  | invalid                                        | invalid                 
  *                 |
  *  
  *  Examples:
  *  
  *  | interval_unit   |
  *  interval   | month   | day_of_month   | valid?                             
  *                 |
  *  | :-------------- | :--------- | :------ |
  *  :------------- | :------------------------------------------------- |
  * 
  *  | yearly          | 1          | january | -1             | valid          
  *                                     |
  *  | yearly          | 1          |
  *  march   |                | invalid - missing `day_of_month`                
  *    |
  *  | monthly         | 6          |         | 12             | valid 
  *                                              |
  *  | monthly         | 6   
  *        | august  | 12             | invalid - `month` must be blank         
  *            |
  *  | weekly          | 2          |         |               
  *  | valid                                              |
  *  | weekly       
  *    | 2          | october | 10             | invalid - `month` and
  *  `day_of_month` must be blank |
  *  
  *  #### Rolling dates
  *  
  * 
  *  When a charge date falls on a non-business day, one of two things will
  *  happen:
  *  
  *  - if the recurrence rule specified `-1` as the
  *  `day_of_month`, the charge date will be rolled __backwards__ to the
  *  previous business day (i.e., the last working day of the month).
  *  -
  *  otherwise the charge date will be rolled __forwards__ to the next business
  *  day.
  *  
  */
class Subscription extends Base
{
  
  /**
    *  Creates a new subscription object
    *
    *  Example URL: /subscriptions
    *  @return Subscription
    **/
    public function create($options = array())
    {
        return $this->makeRequest('post', '/subscriptions', $options);
    }

  /**
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your subscriptions.
    *
    *  Example URL: /subscriptions
    *  @return ListResponse
    **/
    public function do_list($options = array())
    {
        return $this->makeRequest('get', '/subscriptions', $options);
    }

  /**
    *  Retrieves the details of a single subscription.
    *
    *  Example URL: /subscriptions/:identity
    *
    *  @param identity:  Unique identifier, beginning with "SB"
    *  @return Subscription
    **/
    public function get($identity, $options = array())
    {
        $path = $this->subUrl('/subscriptions/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('get', $path, $options);
    }

  /**
    *  Updates a subscription object.
    *
    *  Example URL: /subscriptions/:identity
    *
    *  @param identity:  Unique identifier, beginning with "SB"
    *  @return Subscription
    **/
    public function update($identity, $options = array())
    {
        $path = $this->subUrl('/subscriptions/:identity', array(
            'identity' => $identity
        ));

        return $this->makeRequest('put', $path, $options);
    }

  /**
    *  Immediately cancels a subscription; no more payments will be created
    *  under it. Any metadata supplied to this endpoint will be stored on the
    *  payment cancellation event it causes.
    *  
    *  This will fail with
    *  a cancellation_failed error if the subscription is already cancelled or
    *  finished.
    *
    *  Example URL: /subscriptions/:identity/actions/cancel
    *
    *  @param identity:  Unique identifier, beginning with "SB"
    *  @return Subscription
    **/
    public function cancel($identity, $options = array())
    {
        $path = $this->subUrl('/subscriptions/:identity/actions/cancel', array(
            'identity' => $identity
        ));

        return $this->makeRequest('post', $path, $options);
    }



  /**
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your subscriptions.
    *
    *  Example URL: /subscriptions\
    *  @return Paginator
    **/
    public function all($listMax, $options = array())
    {
        return new Paginator($this, $listMax, $this->do_list($options), $options);
    }


   /**
    * Get the resource loading class.
    * Used internally to send http requests.
    *
    * @return string
    */
    protected function resourceClass()
    {
        return '\GoCardless\Resources\Subscription';
    }

  /**
    *  Get the key the response object is enclosed in in JSON.
    *  Used internally to wrap and unwrap http requests.
    *
    *  @return string
    */
    protected function envelopeKey()
    {
        return 'subscriptions';
    }
}
