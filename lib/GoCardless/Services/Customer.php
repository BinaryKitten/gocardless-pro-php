<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Services;

/**
  *  Customers
  *
  * @method \GoCardless\Core\ListResponse list() list(array $options = array(), array $headers = array()) gets a non-paginated list of models given finder options.
  *
  *  Customer objects hold the contact details for a customer. A customer can
  *  have several [customer bank
  *  accounts](https://developer.gocardless.com/pro/#api-endpoints-customer-bank-accounts),
  *  which in turn can have several Direct Debit
  *  [mandates](https://developer.gocardless.com/pro/#api-endpoints-mandates).
  */
class Customer extends Base
{
  
  /**
    *  Create a customer
    *
    *  Creates a new customer object.
    *
    *  Example URL: /customers
    *  @return Customer
    *  @throws \GoCardless\Core\Error\GoCardlessError GoCardless API or server error, subclasses thereof.
    *  @throws \GoCardless\Core\Error\HttpError PHP Curl transport layer-level errors.
    **/
    public function create($params = array(), $headers = array())
    {
        return $this->make_request('post', '/customers', $params);
    }

  /**
    *  List customers
    *
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your customers.
    *
    *  Example URL: /customers
    *  @return \GoCardless\Core\ListResponse
    *  @throws \GoCardless\Core\Error\GoCardlessError GoCardless API or server error, subclasses thereof.
    *  @throws \GoCardless\Core\Error\HttpError PHP Curl transport layer-level errors.
    **/
    public function do_list($params = array(), $headers = array())
    {
        return $this->make_request('get', '/customers', $params);
    }

  /**
    *  Get a single customer
    *
    *  Retrieves the details of an existing customer.
    *
    *  Example URL: /customers/:identity
    *
    *  @param identity:  Unique identifier, beginning with "CU".
    *  @return Customer
    *  @throws \GoCardless\Core\Error\GoCardlessError GoCardless API or server error, subclasses thereof.
    *  @throws \GoCardless\Core\Error\HttpError PHP Curl transport layer-level errors.
    **/
    public function get($identity, $params = array(), $headers = array())
    {
        $path = $this->sub_url('/customers/:identity', array(
            'identity' => $identity
        ));

        return $this->make_request('get', $path, $params, $headers);
    }

  /**
    *  Update a customer
    *
    *  Updates a customer object. Supports all of the fields supported when
    *  creating a customer.
    *
    *  Example URL: /customers/:identity
    *
    *  @param identity:  Unique identifier, beginning with "CU".
    *  @return Customer
    *  @throws \GoCardless\Core\Error\GoCardlessError GoCardless API or server error, subclasses thereof.
    *  @throws \GoCardless\Core\Error\HttpError PHP Curl transport layer-level errors.
    **/
    public function update($identity, $params = array(), $headers = array())
    {
        $path = $this->sub_url('/customers/:identity', array(
            'identity' => $identity
        ));

        return $this->make_request('put', $path, $params, $headers);
    }



  /**
    *  List customers
    *
    *  Returns a
    *  [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    *  list of your customers.
    *
    *  Example URL: /customers\
    *  @return \GoCardless\Core\Paginator
    **/
    public function all($list_max, $options = array(), $headers = array())
    {
        return new \GoCardless\Core\Paginator($this, $list_max, $this->do_list($options), $options, $headers);
    }


   /**
    * Get the resource loading class.
    * Used internally to send http requests.
    *
    * @return string
    */
    protected function resourceClass()
    {
        return '\GoCardless\Resources\Customer';
    }

  /**
    *  Get the key the response object is enclosed in in JSON.
    *  Used internally to wrap and unwrap http requests.
    *
    *  @return string
    */
    protected function envelopeKey()
    {
        return 'customers';
    }
}
