<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  *
  */

namespace GoCardless\Core;

class CurlWrapper
{
  function __construct($method, $url)
  {
    $this->headers = array();
    $this->responseHeaders = array();
    $this->curl = curl_init($url);
    $this->setupCurl($method);
  }

  private function setupCurl($method)
  {
    $this->opts = array(
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_HEADER => false,
      CURLOPT_USERAGENT => $this->getUserAgent(),
      CURLOPT_TIMEOUT => 30,
      CURLOPT_CUSTOMREQUEST => strtoupper($method),
      CURLOPT_VERBOSE => false,
      CURLOPT_HEADERFUNCTION => array($this, 'setResponseHeader')
    );
  }

  private function getUserAgent()
  {
    $curlinfo = curl_version();
    $uagent = 'GoCardless Client v0.0.1; ';
    $uagent .= 'OS ' . $curlinfo['host'] . '; ';
    $uagent .= 'Curl ' . $curlinfo['version'] . '; ';
    $uagent .= 'PHP ' . phpversion() . ';';
    return $uagent;
  }

  private function setOpt($optName, $optValue)
  {
    $this->opts[$optName] = $optValue;
  }

  function setPostBody($postBody, $contentType)
  {
    $this->setHeaders(array('content-type' => $contentType));
    $this->setOpt(CURLOPT_POSTFIELDS, $postBody);
  }

  function setAuth($auth)
  {
    $this->setOpt(CURLOPT_USERPWD, $auth);
  }

  function setHeaders($headers)
  {
    foreach ($headers as $key => $val)
    {
      $this->headers[strtolower($key)] = $val;
    }
  }

  function setResponseHeader($_, $header)
  {
    $pos = strpos($header, ':');
    if ($pos > 0)
    {
      $this->responseHeaders[substr($header, 0, $pos)] = rtrim(substr($header, $pos + 2));
    }
    return strlen($header);
  }

  private function setupRequest()
  {
    $curlHeaders = array();
    foreach ($this->headers as $headerKey => $headerVal)
    {
      $curlHeaders[] = $headerKey . ': ' . $headerVal;
    }
    $this->opts[CURLOPT_HTTPHEADER] = $curlHeaders;
    foreach ($this->opts as $optKey => $optVal)
    {
      curl_setopt($this->curl, $optKey, $optVal);
    }
  }

  function run()
  {
    $this->setupRequest();
    $responseBody = curl_exec($this->curl);
    if ($responseBody === false)
    {
      throw new Error\HttpError(curl_errno($this->curl), curl_error($this->curl));
    }
    $responseContentType = curl_getinfo($this->curl, CURLINFO_CONTENT_TYPE);
    $responseStatus = curl_getinfo($this->curl, CURLINFO_HTTP_CODE);
    curl_close($this->curl);
    return array(
      'body' => $responseBody,
      'status' => $responseStatus,
      'content-type' => $responseContentType,
      'headers' => $this->responseHeaders
    );
  }

}
