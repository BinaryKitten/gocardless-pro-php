<?php
/**
 * WARNING: Do not edit by hand, this file was generated by Crank:
 *
 *   https://github.com/gocardless/crank
 */

namespace GoCardless\Core;

class ListResponse implements \Iterator, \ArrayAccess
{
    private $models = array();
    private $response;
    private $modelClass;
    private $position = 0;

    public function __construct($modelClass, $response)
    {
        $this->modelClass = $modelClass;
        $this->response = $response;
        foreach ($response->response() as $item) {
            $this->models[] = new $modelClass($item);
        }
    }

    public function response()
    {
        return $this->response;
    }

    public function items()
    {
        return $this->models;
    }

    public function meta()
    {
        return $this->response->meta();
    }

    public function getItems()
    {
        return $this->models;
    }

    /**
      * Methods to allow for array access to list response.
      */
    public function offsetSet($offset, $value)
    {
        throw new \Exception($this->modelClass . ' ListResponse is readonly');
    }
    public function offsetUnset($offset)
    {
        throw new \Exception($this->modelClass . ' ListResponse is readonly');
    }
    public function offsetExists($offset)
    {
        return isset($this->models[$offset]);
    }
    public function offsetGet($offset)
    {
        return $this->models[$offset];
    }

    /**
      * Array Iterator methods to allow foreach() on object.
      */
    public function rewind()
    {
        $this->position = 0;
    }
    public function current()
    {
        return $this->models[$this->position];
    }
    public function key()
    {
        return $this->position;
    }
    public function next()
    {
        ++$this->position;
    }
    public function valid()
    {
        return isset($this->models[$this->position]);
    }
}
