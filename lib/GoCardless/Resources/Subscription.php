<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Resources;

/**
  *  Subscriptions create
  *  [payments](https://developer.gocardless.com/pro/#api-endpoints-payments)
  *  according to a schedule.
  *  
  *  #### Recurrence Rules
  *  
  *  The
  *  following rules apply when specifying recurrence:
  *  - The first payment
  *  must be charged within 1 year.
  *  - When neither `month` nor
  *  `day_of_month` are present, the subscription will recur from the `start_at`
  *  based on the `interval_unit`.
  *  - If `month` or `day_of_month` are
  *  present, the recurrence rules will be applied from the `start_at`, and the
  *  following validations apply:
  *  
  *  | interval_unit   | month          
  *                                 | day_of_month                            |

  *   *  | :-------------- | :--------------------------------------------- |
  *  :-------------------------------------- |
  *  | yearly          | optional
  *  (required if `day_of_month` provided) | optional (required if `month`
  *  provided) |
  *  | monthly         | invalid                               
  *          | required                                |
  *  | weekly         
  *  | invalid                                        | invalid                 
  *                 |
  *  
  *  Examples:
  *  
  *  | interval_unit   |
  *  interval   | month   | day_of_month   | valid?                             
  *                 |
  *  | :-------------- | :--------- | :------ |
  *  :------------- | :------------------------------------------------- |
  * 
  *  | yearly          | 1          | january | -1             | valid          
  *                                     |
  *  | yearly          | 1          |
  *  march   |                | invalid - missing `day_of_month`                
  *    |
  *  | monthly         | 6          |         | 12             | valid 
  *                                              |
  *  | monthly         | 6   
  *        | august  | 12             | invalid - `month` must be blank         
  *            |
  *  | weekly          | 2          |         |               
  *  | valid                                              |
  *  | weekly       
  *    | 2          | october | 10             | invalid - `month` and
  *  `day_of_month` must be blank |
  *  
  *  #### Rolling dates
  *  
  * 
  *  When a charge date falls on a non-business day, one of two things will
  *  happen:
  *  
  *  - if the recurrence rule specified `-1` as the
  *  `day_of_month`, the charge date will be rolled __backwards__ to the
  *  previous business day (i.e., the last working day of the month).
  *  -
  *  otherwise the charge date will be rolled __forwards__ to the next business
  *  day.
  *  
  */
class Subscription
{

    private $data;
    private $response;

    public function __construct($data, $response = null)
    {
        if ($data === null) {
            throw new \Exception('Data cannot be null');
        }
        $this->response = $response;
        $this->data = $data;
    }

    public function amount()
    {
        return $this->data->amount;
    }

    public function count()
    {
        return $this->data->count;
    }

    public function created_at()
    {
        return $this->data->created_at;
    }

    public function currency()
    {
        return $this->data->currency;
    }

    public function day_of_month()
    {
        return $this->data->day_of_month;
    }

    public function end_at()
    {
        return $this->data->end_at;
    }

    public function id()
    {
        return $this->data->id;
    }

    public function interval()
    {
        return $this->data->interval;
    }

    public function interval_unit()
    {
        return $this->data->interval_unit;
    }

    public function links()
    {
        return $this->data->links;
    }

    public function metadata()
    {
        return $this->data->metadata;
    }

    public function month()
    {
        return $this->data->month;
    }

    public function name()
    {
        return $this->data->name;
    }

    public function start_at()
    {
        return $this->data->start_at;
    }

    public function status()
    {
        return $this->data->status;
    }

    public function upcoming_payments()
    {
        return $this->data->upcoming_payments;
    }

    public function response() {
        return $this->response;
    }
    public function __toString() {
        $ret = 'Subscription Class (';
        $ret .= print_r($this->data, true) . ')';
        return $ret;
    }
}
