<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Resources;

/**
  * Mandates represent the Direct Debit mandate with a
  * [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).
 
  * * 
  * GoCardless will notify you via a
  * [webhook](https://developer.gocardless.com/pro/#webhooks) whenever the
  * status of a mandate changes.
  */
class Mandate
{

    private $data;
    private $response;

  /**
    * Creates a new Resource from a http response passing in the data.
    * @param stdClass $data Data coming into the resource.
    * @param Response $response \<no value>\Core\Response object.
    */
    public function __construct($data, $response = null)
    {
        // Don't blow up with blank data anymore for raw responses.
        if ($data === null) {
            $data = new \stdClass();
        }
        $this->response = $response;
        $this->data = $data;
    }


  /**
    * Fixed
    * [timestamp](https://developer.gocardless.com/pro/#overview-time-zones-dates),
    * recording when this resource was created.
    *
    * @return string
    */
    public function created_at()
    {
        $field = 'created_at';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Unique identifier, beginning with "MD"
    *
    * @return string
    */
    public function id()
    {
        $field = 'id';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Referenced objects. Key values to stdClasses returned.
    *
    * @return array[string]string
    */
    public function links()
    {
        $field = 'links';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Key-value store of custom data. Up to 3 keys are permitted, with key names
    * up to 50 characters and values up to 200 characters.
    *
    * @return array[string]string
    */
    public function metadata()
    {
        $field = 'metadata';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * The earliest date a newly created payment for this mandate could be
    * charged
    *
    * @return string
    */
    public function next_possible_charge_date()
    {
        $field = 'next_possible_charge_date';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Unique 6 to 18 character reference. Can be supplied or auto-generated.
    *
    * @return string
    */
    public function reference()
    {
        $field = 'reference';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Direct Debit scheme to which this mandate and associated payments are
    * submitted. Can be supplied or automatically detected from the customer's
    * bank account. Currently only "bacs" and "sepa_core" are supported.
    *
    * @return string
    */
    public function scheme()
    {
        $field = 'scheme';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * One of:
    * <ul>
    * <li>`pending_submission`: the mandate has not yet
    * been submitted to the customer's bank</li>
    * <li>`submitted`: the
    * mandate has been submitted to the customer's bank but has not been
    * processed yet</li>
    * <li>`active`: the mandate has been successfully
    * set up by the customer's bank</li>
    * <li>`failed`: the mandate could
    * not be created</li>
    * <li>`cancelled`: the mandate has been
    * cancelled</li>
    * <li>`expired`: the mandate has expired due to
    * dormancy</li>
    * </ul>
    * [pending_submission submitted active failed cancelled expired]
    * @return string
    */
    public function status()
    {
        $field = 'status';
        if (!property_exists($this->data, $field)) {
            echo 'no prop!', $field;
          return null;
        }
        return $this->data->{$field};
    }



  /**
    * Get the response object.
    * @return \GoCardless\Core\Response
    */
    public function response()
    {
        return $this->response;
    }

  /**
    * Returns a string representation of the project.
    * @return string 
    */
    public function __toString()
    {
        $ret = 'Mandate Class (';
        $ret .= print_r($this->data, true);
        return $ret;
    }
}
