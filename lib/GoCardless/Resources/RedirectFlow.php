<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Resources;

/**
  * Redirect flows enable you to use GoCardless Pro's secure payment pages to
  * set up mandates with your customers.
  * 
  * The overall flow is:
  * 
  *
  * 1. You
  * [create](https://developer.gocardless.com/pro/#create-a-redirect-flow) a
  * redirect flow for your customer, and redirect them to the returned redirect
  * url, e.g. `https://pay.gocardless.com/flow/RE123`.
  * 
  * 2. Your customer
  * supplies their name, email, address, and bank account details, and submits
  * the form. This securely stores their details, and redirects them back to
  * your `success_redirect_url` with `redirect_flow_id=RE123` in the
  * querystring.
  * 
  * 3. You
  * [complete](https://developer.gocardless.com/pro/#complete-a-redirect-flow)
  * the redirect flow, which creates a
  * [customer](https://developer.gocardless.com/pro/#api-endpoints-customers),
  * [customer bank
  * account](https://developer.gocardless.com/pro/#api-endpoints-customer-bank-accounts),
  * and [mandate](https://developer.gocardless.com/pro/#api-endpoints-mandates),
  * and returns the ID of the mandate. You may wish to create a
  * [subscription](https://developer.gocardless.com/pro/#api-endpoints-subscriptions)
  * or [payment](https://developer.gocardless.com/pro/#api-endpoints-payments)
  * at this point.
  * 
  * It is recommended that you link the redirect flow to
  * your user object as soon as it is created, and attach the created resources
  * to that user in the complete step.
  * 
  * Redirect flows expire 30 minutes
  * after they are first created. You cannot
  * [complete](https://developer.gocardless.com/pro/#complete-a-redirect-flow)
  * an expired redirect flow.
  * 
  * [View an example
  * integration](https://pay-sandbox.gocardless.com/AL000000AKFPFF) that uses
  * redirect flows.
  */
class RedirectFlow extends Base
{



  /**
    * Fixed
    * [timestamp](https://developer.gocardless.com/pro/#overview-time-zones-dates),
    * recording when this resource was created.
    *
    * @return string
    */
    public function created_at()
    {
        $field = 'created_at';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * A description of the item the customer is paying for
    *
    * @return string
    */
    public function description()
    {
        $field = 'description';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Unique identifier, beginning with "RE"
    *
    * @return string
    */
    public function id()
    {
        $field = 'id';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Referenced objects. Key values to stdClasses returned.
    *
    * @return Wrapper\NestedObject
    */
    public function links()
    {
        $field = 'links';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return new Wrapper\NestedObject($field, $this->data->{$field});

    }

  /**
    * The URI to redirect the customer to to setup their mandate
    *
    * @return string
    */
    public function redirect_url()
    {
        $field = 'redirect_url';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * The Direct Debit scheme of the mandate. If specified, the payment pages
    * will only allow the set-up of a mandate for the specified scheme.
    * [bacs sepa_core <nil>]
    * @return string
    */
    public function scheme()
    {
        $field = 'scheme';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * The customer's session ID
    *
    * @return string
    */
    public function session_token()
    {
        $field = 'session_token';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * The URI to redirect to upon success mandate setup
    *
    * @return string
    */
    public function success_redirect_url()
    {
        $field = 'success_redirect_url';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }


  /**
    * Returns a string representation of the project.
    *
    * @return string 
    */
    public function __toString()
    {
        $ret = 'RedirectFlow Class (';
        $ret .= print_r($this->data, true);
        return $ret;
    }
}
