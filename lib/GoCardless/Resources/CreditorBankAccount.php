<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Resources;

/**
  * Creditor Bank Accounts hold the bank details of a
  * [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditor).
  * These are the bank accounts which your
  * [payouts](https://developer.gocardless.com/pro/#api-endpoints-payouts) will
  * be sent to.
  * 
  * Note that creditor bank accounts must be unique, and so
  * you will encounter a `bank_account_exists` error if you try to create a
  * duplicate bank account. You may wish to handle this by updating the existing
  * record instead, the ID of which will be provided as
  * `links[creditor_bank_account]` in the error response.
  */
class CreditorBankAccount
{

    private $data;
    private $response;

  /**
    * Creates a new Resource from a http response passing in the data.
    * @param mixed $data Data coming into the resource.
    * @param Response $response \<no value>\Core\Response object.
    */
    public function __construct($data, $response = null)
    {
        if ($data === null) {
            throw new \Exception('Data cannot be null');
        }
        $this->response = $response;
        $this->data = $data;
    }


  /**
    * Name of the account holder, as known by the bank. Usually this is the same
    * as the name stored with the linked
    * [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditors).
    * This field cannot exceed 18 characters.
    *
    * @return string
    */
    public function accountHolderName()
    {
        return $this->data->account_holder_name;
    }

  /**
    * Last two digits of account number.
    *
    * @return string
    */
    public function accountNumberEnding()
    {
        return $this->data->account_number_ending;
    }

  /**
    * Name of bank, taken from sort code.
    *
    * @return string
    */
    public function bankName()
    {
        return $this->data->bank_name;
    }

  /**
    * [ISO
    * 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements)
    * alpha-2 code. Currently only GB is supported.
    *
    * @return string
    */
    public function countryCode()
    {
        return $this->data->country_code;
    }

  /**
    * Fixed
    * [timestamp](https://developer.gocardless.com/pro/#overview-time-zones-dates),
    * recording when this resource was created.
    *
    * @return string
    */
    public function createdAt()
    {
        return $this->data->created_at;
    }

  /**
    * [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency
    * code, defaults to national currency of `country_code`.
    *
    * @return string
    */
    public function currency()
    {
        return $this->data->currency;
    }

  /**
    * Boolean value showing whether the bank account is enabled or disabled.
    *
    * @return bool
    */
    public function enabled()
    {
        return $this->data->enabled;
    }

  /**
    * Unique identifier, beginning with "BA"
    *
    * @return string
    */
    public function id()
    {
        return $this->data->id;
    }

  /**
    * Referenced objects. Key values to stdClasses returned.
    *
    * @return array[string]string
    */
    public function links()
    {
        return $this->data->links;
    }

  /**
    * Key-value store of custom data. Up to 3 keys are permitted, with key names
    * up to 50 characters and values up to 200 characters.
    *
    * @return array[string]string
    */
    public function metadata()
    {
        return $this->data->metadata;
    }



  /**
    * Get the response object.
    * @return \GoCardless\Core\Response
    */
    public function response()
    {
        return $this->response;
    }

  /**
    * Returns a string representation of the project.
    * @return string 
    */
    public function __toString()
    {
        $ret = 'CreditorBankAccount Class (';
        $ret .= print_r($this->data, true);
        return $ret;
    }
}
