<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Resources;

/**
  * <a name="api_key_not_active"></a>API keys are designed to be used by any
  * integrations you build. You should generate a key and then use it to make
  * requests to the API and set the webhook URL for that integration. They do
  * not expire, but can be disabled.
  */
class ApiKey extends Base
{



  /**
    * Fixed
    * [timestamp](https://developer.gocardless.com/pro/2014-11-03/#overview-time-zones-dates),
    * recording when this record was created.
    *
    * @return string
    */
    public function created_at()
    {
        $field = 'created_at';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Boolean value showing whether the API key is enabled or disabled.
    *
    * @return bool
    */
    public function enabled()
    {
        $field = 'enabled';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Unique identifier, beginning with "AK"
    *
    * @return string
    */
    public function id()
    {
        $field = 'id';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Secret key.
    *
    * @return string
    */
    public function key()
    {
        $field = 'key';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Referenced objects. Key values to stdClasses returned.
    *
    * @return Wrapper\NestedObject
    */
    public function links()
    {
        $field = 'links';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return new Wrapper\NestedObject($field, $this->data->{$field});

    }

  /**
    * Human readable name for the key. This field cannot exceed 75 characters.
    *
    * @return string
    */
    public function name()
    {
        $field = 'name';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }

  /**
    * Optional https url, to which all webhooks will be sent. Note that if this
    * is set on multiple API keys, each event will be sent to each
    * `webhook_url`; for example, if you have two keys with `webhook_url` set to
    * `https://example.com/webhooks`, then we will send two requests to that url
    * for each event that occurs.
    *
    * @return string
    */
    public function webhook_url()
    {
        $field = 'webhook_url';
        if (!property_exists($this->data, $field)) {
          return null;
        }
        return $this->data->{$field};
    }


  /**
    * Returns a string representation of the project.
    *
    * @return string 
    */
    public function __toString()
    {
        $ret = 'ApiKey Class (';
        $ret .= print_r($this->data, true);
        return $ret;
    }
}
