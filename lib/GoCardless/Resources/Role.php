<?php
/**
  * WARNING: Do not edit by hand, this file was generated by Crank:
  *
  * https://github.com/gocardless/crank
  */

namespace GoCardless\Resources;

/**
  *  <a name="insufficient_permissions"></a>Roles represent a set of permissions
  *  that may be granted to a user. The permissions are specified at the
  *  resource-type level, and can be `full_access` or `read_only`. If a
  *  resource-type is not included that role's users will have no access to
  *  resources of that type, and will receive an `insufficient_permissions`
  *  error when trying to use those endpoints.
  *  
  *  A role's `permissions`
  *  attribute is used to set/show the permissions for a role and it's key/value
  *  pairs are restricted to the below:
  *  
  *  <dl>
  *   
  *  <dt><p><code>resource</code></p></dt>
  *    <dd><p>One of:</p>
  *     
  *  <ul>
  *        <li><code>customers</code></li>
  *       
  *  <li><code>customer_bank_accounts</code></li>
  *       
  *  <li><code>mandates</code></li>
  *        <li><code>payments</code></li>
 
  *  *        <li><code>payouts</code></li>
  *       
  *  <li><code>creditors</code></li>
  *       
  *  <li><code>creditor_bank_accounts</code></li>
  *       
  *  <li><code>roles</code></li>
  *        <li><code>users</code></li>
  *     
  *    <li><code>events</code></li>
  *        <li><code>api_keys</code></li>
 
  *  *        <li><code>subscriptions</code></li>
  *       
  *  <li><code>redirect_flows</code></li>
  *      </ul>
  *    </dd>
  * 
  *  </dl>
  *  
  *  <dl>
  *    <dt><p><code>access</code></p></dt>
  *   
  *  <dd><p>One of:</p>
  *      <ul>
  *        <li><code>full_access</code>:
  *  read and write all records of this type</li>
  *       
  *  <li><code>read_only</code>: list and show endpoints available, but not
  *  create, update, delete, or actions</li>
  *      </ul>
  *    </dd>
  * 
  *  </dl>
  *  
  */
class Role
{

    private $data;
    private $response;

    public function __construct($data, $response = null)
    {
        if ($data === null) {
            throw new \Exception('Data cannot be null');
        }
        $this->response = $response;
        $this->data = $data;
    }

    public function created_at()
    {
        return $this->data->created_at;
    }

    public function enabled()
    {
        return $this->data->enabled;
    }

    public function id()
    {
        return $this->data->id;
    }

    public function name()
    {
        return $this->data->name;
    }

    public function permissions()
    {
        return $this->data->permissions;
    }

    public function response() {
        return $this->response;
    }
    public function __toString() {
        $ret = 'Role Class (';
        $ret .= print_r($this->data, true) . ')';
        return $ret;
    }
}
